export type JavascriptRuntime = 'NODE' | 'WEB' | 'WORKER';
type PHPHeaders = Record<string, string>;
export interface FileInfo {
    key: string;
    name: string;
    type: string;
    data: Uint8Array;
}
export interface PHPRequest {
    /**
     * Request path following the domain:port part.
     */
    relativeUri?: string;
    /**
     * Path of the .php file to execute.
     */
    scriptPath?: string;
    /**
     * Request protocol.
     */
    protocol?: string;
    /**
     * Request method. Default: `GET`.
     */
    method?: 'GET' | 'POST' | 'HEAD' | 'OPTIONS' | 'PATCH' | 'PUT' | 'DELETE';
    /**
     * Request headers.
     */
    headers?: PHPHeaders;
    /**
     * Request body without the files.
     */
    body?: string;
    /**
     * Uploaded files.
     */
    fileInfos?: FileInfo[];
    /**
     * The code snippet to eval instead of a php file.
     */
    code?: string;
}
export interface PHPResponse {
    /**
     * The exit code of the script. `0` is a success, while
     * `1` and `2` indicate an error.
     */
    exitCode: number;
    /**
     * Response body. Contains the output from `echo`,
     * `print`, inline HTML etc.
     */
    body: ArrayBuffer;
    /**
     * PHP errors.
     */
    errors: string;
    /**
     * Response headers.
     */
    headers: PHPHeaders;
    /**
     * Response HTTP status code, e.g. 200.
     */
    httpStatusCode: number;
}
export type PHPRuntimeId = number;
/**
 * Loads the PHP runtime with the given arguments and data dependencies.
 *
 * This function handles the entire PHP initialization pipeline. In particular, it:
 *
 * * Instantiates the Emscripten PHP module
 * * Wires it together with the data dependencies and loads them
 * * Ensures is all happens in a correct order
 * * Waits until the entire loading sequence is finished
 *
 * Basic usage:
 *
 * ```js
 *  const phpLoaderModule = await import("/php.js");
 *  const php = await startPHP(phpLoaderModule, "web");
 *  console.log(php.run(`<?php echo "Hello, world!"; `));
 *  // { stdout: ArrayBuffer containing the string "Hello, world!", stderr: [''], exitCode: 0 }
 * ```
 *
 * **The `/php.js` module:**
 *
 * In the basic usage example, `php.js` is **not** a vanilla Emscripten module. Instead,
 * it's an ESM module that wraps the regular Emscripten output and adds some
 * extra functionality. It's generated by the Dockerfile shipped with this repo.
 * Here's the API it provides:
 *
 * ```js
 * // php.wasm size in bytes:
 * export const dependenciesTotalSize = 5644199;
 *
 * // php.wasm filename:
 * export const dependencyFilename = 'php.wasm';
 *
 * // Run Emscripten's generated module:
 * export default function(jsEnv, emscriptenModuleArgs) {}
 * ```
 *
 * **PHP Filesystem:**
 *
 * Once initialized, the PHP has its own filesystem separate from the project
 * files. It's provided by [Emscripten and uses its FS library](https://emscripten.org/docs/api_reference/Filesystem-API.html).
 *
 * The API exposed to you via the PHP class is succinct and abstracts
 * await certain unintuitive parts of low-level FS interactions.
 *
 * Here's how to use it:
 *
 * ```js
 * // Recursively create a /var/www directory
 * php.mkdirTree('/var/www');
 *
 * console.log(php.fileExists('/var/www/file.txt'));
 * // false
 *
 * php.writeFile('/var/www/file.txt', 'Hello from the filesystem!');
 *
 * console.log(php.fileExists('/var/www/file.txt'));
 * // true
 *
 * console.log(php.readFile('/var/www/file.txt'));
 * // "Hello from the filesystem!
 *
 * // Delete the file:
 * php.unlink('/var/www/file.txt');
 * ```
 *
 * For more details consult the PHP class directly.
 *
 * **Data dependencies:**
 *
 * Using existing PHP packages by manually recreating them file-by-file would
 * be quite inconvenient. Fortunately, Emscripten provides a "data dependencies"
 * feature.
 *
 * Data dependencies consist of a `dependency.data` file and a `dependency.js` loader and
 * can be packaged with the [file_packager.py tool]( https://emscripten.org/docs/porting/files/packaging_files.html#packaging-using-the-file-packager-tool).
 * This project requires wrapping the Emscripten-generated `dependency.js` file in an ES
 * module as follows:
 *
 * 1. Prepend `export default function(emscriptenPHPModule) {'; `
 * 2. Prepend `export const dependencyFilename = '<DATA FILE NAME>'; `
 * 3. Prepend `export const dependenciesTotalSize = <DATA FILE SIZE>;`
 * 4. Append `}`
 *
 * Be sure to use the `--export-name="emscriptenPHPModule"` file_packager.py option.
 *
 * You want the final output to look as follows:
 *
 * ```js
 * export const dependenciesTotalSize = 5644199;
 * export const dependencyFilename = 'dependency.data';
 * export default function(emscriptenPHPModule) {
 *    // Emscripten-generated code:
 *    var Module = typeof emscriptenPHPModule !== 'undefined' ? emscriptenPHPModule : {};
 *    // ... the rest of it ...
 * }
 * ```
 *
 * Such a constructions enables loading the `dependency.js` as an ES Module using
 * `import("/dependency.js")`.
 *
 * Once it's ready, you can load PHP and your data dependencies as follows:
 *
 * ```js
 *  const [phpLoaderModule, wordPressLoaderModule] = await Promise.all([
 *    import("/php.js"),
 *    import("/wp.js")
 *  ]);
 *  const php = await startPHP(phpLoaderModule, "web", {}, [wordPressLoaderModule]);
 * ```
 *
 * @public
 * @param  phpLoaderModule         - The ESM-wrapped Emscripten module. Consult the Dockerfile for the build process.
 * @param  runtime                 - The current JavaScript environment. One of: NODE, WEB, or WEBWORKER.
 * @param  phpModuleArgs           - The Emscripten module arguments, see https://emscripten.org/docs/api_reference/module.html#affecting-execution.
 * @param  dataDependenciesModules - A list of the ESM-wrapped Emscripten data dependency modules.
 * @returns Loaded runtime id.
 */
export declare function loadPHPRuntime(phpLoaderModule: PHPLoaderModule, phpModuleArgs?: EmscriptenOptions, dataDependenciesModules?: DataModule[]): Promise<number>;
export interface PHPIni {
    setPhpIniPath(path: string): void;
    setPhpIniEntry(key: string, value: string): void;
}
export interface CLIHandler {
    /**
     * Starts a PHP CLI session with given arguments.
     *
     * Can only be used when PHP was compiled with the CLI SAPI.
     * Cannot be used in conjunction with `run()`.
     *
     * @param  argv - The arguments to pass to the CLI.
     * @returns The exit code of the CLI session.
     */
    cli(argv: string[]): Promise<number>;
}
export interface NodeFilesystem {
    /**
     * Mounts a Node.js filesystem to a given path in the PHP filesystem.
     *
     * @param  settings - The Node.js filesystem settings.
     * @param  path     - The path to mount the filesystem to.
     * @see {@link https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.mount}
     */
    mount(settings: any, path: string): any;
}
export interface Filesystem {
    /**
     * Recursively creates a directory with the given path in the PHP filesystem.
     * For example, if the path is `/root/php/data`, and `/root` already exists,
     * it will create the directories `/root/php` and `/root/php/data`.
     *
     * @param  path - The directory path to create.
     */
    mkdirTree(path: string): void;
    /**
     * Reads a file from the PHP filesystem and returns it as a string.
     *
     * @throws {@link ErrnoError} – If the file doesn't exist.
     * @param  path - The file path to read.
     * @returns The file contents.
     */
    readFileAsText(path: string): string;
    /**
     * Reads a file from the PHP filesystem and returns it as an array buffer.
     *
     * @throws {@link ErrnoError} – If the file doesn't exist.
     * @param  path - The file path to read.
     * @returns The file contents.
     */
    readFileAsBuffer(path: string): Uint8Array;
    /**
     * Overwrites data in a file in the PHP filesystem.
     * Creates a new file if one doesn't exist yet.
     *
     * @param  path - The file path to write to.
     * @param  data - The data to write to the file.
     */
    writeFile(path: string, data: string | Uint8Array): void;
    /**
     * Removes a file from the PHP filesystem.
     *
     * @throws {@link ErrnoError} – If the file doesn't exist.
     * @param  path - The file path to remove.
     */
    unlink(path: string): void;
    /**
     * Lists the files and directories in the given directory.
     *
     * @param  path - The directory path to list.
     * @returns The list of files and directories in the given directory.
     */
    listFiles(path: string): string[];
    /**
     * Checks if a directory exists in the PHP filesystem.
     *
     * @param  path – The path to check.
     * @returns True if the path is a directory, false otherwise.
     */
    isDir(path: string): boolean;
    /**
     * Checks if a file (or a directory) exists in the PHP filesystem.
     *
     * @param  path - The file path to check.
     * @returns True if the file exists, false otherwise.
     */
    fileExists(path: string): boolean;
}
export interface HandlesRun {
    /**
     * Dispatches a PHP request.
     * Cannot be used in conjunction with `cli()`.
     *
     * @example
     * ```js
     * const output = php.run('<?php echo "Hello world!";');
     * console.log(output.stdout); // "Hello world!"
     * ```
     *
     * @example
     * ```js
     * console.log(php.run(`<?php
     *  $fp = fopen('php://stderr', 'w');
     *  fwrite($fp, "Hello, world!");
     * `));
     * // {"exitCode":0,"stdout":"","stderr":["Hello, world!"]}
     * ```
     *
     * @param  request - PHP Request data.
     */
    run(request?: PHPRequest): PHPResponse;
}
export type PHPRuntime = any;
export type PHPLoaderModule = {
    dependencyFilename: string;
    dependenciesTotalSize: number;
    default: (jsRuntime: string, options: EmscriptenOptions) => PHPRuntime;
};
export type DataModule = {
    dependencyFilename: string;
    dependenciesTotalSize: number;
    default: (phpRuntime: PHPRuntime) => void;
};
export type EmscriptenOptions = {
    onAbort?: (message: string) => void;
    ENV?: Record<string, string>;
    locateFile?: (path: string) => string;
    noInitialRun?: boolean;
    dataFileDownloads?: Record<string, number>;
    print?: (message: string) => void;
    printErr?: (message: string) => void;
    onRuntimeInitialized?: () => void;
    monitorRunDependencies?: (left: number) => void;
} & Record<string, any>;
export type MountSettings = {
    root: string;
    mountpoint: string;
};
/**
 * An environment-agnostic wrapper around the Emscripten PHP runtime
 * that abstracts the super low-level API and provides a more convenient
 * higher-level API.
 *
 * It exposes a minimal set of methods to run PHP scripts and to
 * interact with the PHP filesystem.
 *
 * @public
 * @see {startPHP} This class is not meant to be used directly. Use `startPHP` instead.
 */
export declare class PHP implements PHPIni, Filesystem, NodeFilesystem, CLIHandler, HandlesRun {
    #private;
    /**
     * Initializes a PHP runtime.
     *
     * @internal
     * @param  PHPRuntime - Optional. PHP Runtime ID as initialized by loadPHPRuntime.
     */
    constructor(PHPRuntimeId?: PHPRuntimeId);
    initializeRuntime(runtimeId: PHPRuntimeId): void;
    setPhpIniPath(path: string): void;
    setPhpIniEntry(key: string, value: string): void;
    run(request?: PHPRequest): PHPResponse;
    cli(argv: string[]): Promise<number>;
    setSkipShebang(shouldSkip: boolean): void;
    addServerGlobalEntry(key: string, value: string): void;
    mkdirTree(path: string): void;
    readFileAsText(path: string): string;
    readFileAsBuffer(path: string): Uint8Array;
    writeFile(path: string, data: string | Uint8Array): void;
    unlink(path: string): void;
    listFiles(path: string): string[];
    isDir(path: string): boolean;
    fileExists(path: string): boolean;
    mount(settings: MountSettings, path: string): void;
}
/**
 * Output of the PHP.wasm runtime.
 */
export interface PHPOutput {
    /** Exit code of the PHP process. 0 means success, 1 and 2 mean error. */
    exitCode: number;
    /** Stdout data */
    stdout: ArrayBuffer;
    /** Stderr lines */
    stderr: string[];
}
/**
 * Emscripten's filesystem-related Exception.
 *
 * @see https://emscripten.org/docs/api_reference/Filesystem-API.html
 * @see https://github.com/emscripten-core/emscripten/blob/main/system/lib/libc/musl/arch/emscripten/bits/errno.h
 */
export type ErrnoError = Error;
export {};
