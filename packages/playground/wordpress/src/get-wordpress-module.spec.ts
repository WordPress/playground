/**
 * This file lives outside of the `src/wordpress` directory on
 * purpose.
 *
 * `src/wordpress` hosts autogenerated code and is added to eslint
 * and NX ignore lists. However, this test file is written by hand
 * and should still be linted and picked up by the test runner.
 */

import { NodePHP } from '@php-wasm/node';
import { LatestSupportedPHPVersion } from '@php-wasm/universal';

import { getWordPressModule } from './wordpress/get-wordpress-module';

describe('getWordPressModule()', () => {
	it('should return a data loader module', async () => {
		const module = await getWordPressModule();
		expect(module.dependencyFilename).toMatch(/\/wp-\d.\d.data$/);
		expect(typeof module.default).toBe('function');
	});
	it('should create WordPress files in PHP VFS', async () => {
		const php = await NodePHP.load(LatestSupportedPHPVersion, {
			dataModules: [await getWordPressModule()],
		});

		// Let's test
		expect(await php.fileExists('/wordpress/wp-load.php')).toBe(true);
		expect(await php.fileExists('/wordpress/wp-login.php')).toBe(true);
	});

	it('running WordPress functions should work', async () => {
		const php = await NodePHP.load(LatestSupportedPHPVersion, {
			dataModules: [await getWordPressModule()],
		});

		// Instead of merely checking whether specific files exist,
		// let's actually run a piece of WordPress code and confirm
		// it worked.
		const response = await php.run({
			code: `<?php
                require '/wordpress/wp-load.php';
				update_option('blogname', 'My test site!');
                echo get_option('blogname');
			`,
		});
		expect(response.text).toBe('My test site!');
	});
});
