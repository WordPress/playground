import { EmscriptenOptions } from '@php-wasm/universal';
import { existsSync, readFileSync } from 'node:fs';

/**
 * Loads WordPress data modules from the disk
 * instead of trying to load them over the network.
 *
 * Why?
 *
 * Emscripten autogenerated data modules use XMLHttpRequest to
 * load the .data files. However, in Node.js, the data modules
 * are stored on the disk and trying to load them with a network
 * call would fail.
 */
export function withLocalDataModuleLoader(
	phpModuleArgs: EmscriptenOptions = {}
): EmscriptenOptions {
	const originalGetPreloadedPackage = phpModuleArgs['getPreloadedPackage'];
	return {
		...phpModuleArgs,
		// Emscripten data modules use XHR for loading the packed
		// .data file, unless getPreloadedPackage
		getPreloadedPackage(path: string) {
			// If the getPreloadedPackage option is provided, try to use
			// it first.
			if (originalGetPreloadedPackage) {
				const moduleMaybe = originalGetPreloadedPackage();
				if (moduleMaybe) {
					return moduleMaybe;
				}
			}

			// Ok! Let's try to resolve the data module path.
			// We're only going to soft-fail with a warning message, and fall through
			// to the default Emscripten resolution mechanism.

			// A few security checks to make sure this code path is not exploited to
			// load arbitrary files from the filesystem.
			if (!path.endsWith('.data')) {
				console.warn(
					`Invalid data dependency URL "${path}" – the file extension must be ".data".`
				);
				return;
			}
			if (!path.startsWith('/@fs/')) {
				console.warn(
					`Invalid data dependency format "${path}" – the URL is expected to start with /@fs/.`
				);
				return;
			}
			path = path.replace(/^\/@fs/, '');

			// The path may still point to an arbitrary file at this point. Let's be super
			// extra careful, and only accept filenames that seem to be WordPress data
			// modules. This technically introduces coupling between the generic @php-wasm/node
			// module and the @wp-playground/wordPress module, but that's a fair price to
			// pay for the added security. If this ever becomes a problem, let's find
			// a way to leverage the Emscripten's getPreloadedPackage() option.
			if (!path.match(/\/wp-[^/']+\.data$/)) {
				console.warn(
					`Invalid data dependency URL "${path}" – it does not seem to be a WordPress data module.`
				);
				return;
			}

			if (!existsSync(path)) {
				console.warn(
					`Invalid data dependency URL "${path}" – the path does not exist on the disk`
				);
				return;
			}

			const wpData = readFileSync(path);
			// The returned value must be Uint8Array, not a Buffer.
			const wpDataAsUint8Array = wpData.buffer.slice(
				wpData.byteOffset,
				wpData.byteOffset + wpData.byteLength
			);
			return wpDataAsUint8Array;
		},
	};
}
