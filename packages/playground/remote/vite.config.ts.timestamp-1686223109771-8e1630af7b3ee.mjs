// packages/playground/remote/vite.config.ts
import { defineConfig } from "file:///Users/rafalchrzan/Sites/wordpress-playground/node_modules/vite/dist/node/index.js";
import { join } from "path";
import dts from "file:///Users/rafalchrzan/Sites/wordpress-playground/node_modules/vite-plugin-dts/dist/index.mjs";

// packages/playground/build-config.ts
var remoteDevServerHost = "localhost";
var remoteDevServerPort = 4400;

// packages/playground/vite-virtual-module.ts
function virtualModule({
  name,
  content
}) {
  const virtualModuleId = `virtual:${name}`;
  const resolvedVirtualModuleId = "\0" + virtualModuleId;
  return {
    name,
    // required, will show up in warnings and errors
    resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualModuleId;
      }
    },
    load(id) {
      if (id === resolvedVirtualModuleId) {
        return content;
      }
    }
  };
}

// packages/vite-ts-config-paths.ts
import viteTsConfigPathsModule from "file:///Users/rafalchrzan/Sites/wordpress-playground/node_modules/vite-tsconfig-paths/dist/index.mjs";
var viteTsConfigPaths = typeof viteTsConfigPathsModule === "function" ? viteTsConfigPathsModule : viteTsConfigPathsModule.default;

// packages/playground/remote/vite.config.ts
var __vite_injected_original_dirname = "/Users/rafalchrzan/Sites/wordpress-playground/packages/playground/remote";
var __vite_injected_original_import_meta_url = "file:///Users/rafalchrzan/Sites/wordpress-playground/packages/playground/remote/vite.config.ts";
var path = (filename) => new URL(filename, __vite_injected_original_import_meta_url).pathname;
var plugins = [
  viteTsConfigPaths({
    root: "../../../"
  }),
  dts({
    entryRoot: "src",
    tsConfigFilePath: join(__vite_injected_original_dirname, "tsconfig.lib.json"),
    skipDiagnostics: true
  }),
  virtualModule({
    name: "service-worker-version",
    // @TODO: compute a hash of the service worker chunk instead of using the build timestamp
    content: `export const serviceWorkerVersion = '${Date.now()}';`
  })
];
var vite_config_default = defineConfig({
  assetsInclude: ["**/*.wasm", "*.data"],
  cacheDir: "../../../node_modules/.vite/playground",
  css: {
    modules: {
      localsConvention: "camelCaseOnly"
    }
  },
  preview: {
    port: remoteDevServerPort - 100,
    host: remoteDevServerHost
  },
  server: {
    port: remoteDevServerPort,
    host: remoteDevServerHost,
    headers: {
      "Cross-Origin-Resource-Policy": "cross-origin",
      "Cross-Origin-Embedder-Policy": "credentialless"
    },
    fs: {
      // Allow serving files from one level up to the project root
      allow: ["./"]
    }
  },
  plugins,
  worker: {
    format: "es",
    plugins,
    rollupOptions: {
      output: {
        // Ensure the service worker always has the same name
        entryFileNames: (chunkInfo) => {
          if (chunkInfo.name === "service-worker") {
            return "sw.js";
          }
          return "[name]-[hash].js";
        }
      }
    }
  },
  // Configuration for building your library.
  // See: https://vitejs.dev/guide/build.html#library-mode
  build: {
    assetsInlineLimit: 0,
    rollupOptions: {
      input: {
        wordpress: path("/remote.html"),
        "iframe-worker": path("/iframe-worker.html")
      }
    }
  },
  test: {
    globals: true,
    cache: {
      dir: "../../../node_modules/.vitest"
    },
    environment: "jsdom",
    include: ["src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}"]
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
